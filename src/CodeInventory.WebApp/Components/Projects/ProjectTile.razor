@using CodeInventory.WebApp.Models
@using CodeInventory.WebApp.Services
@using Markdig
@inject IProjectService ProjectService
@inject IJSRuntime JSRuntime
@inject ILogger<ProjectTile> Logger

<div class="project-tile @GetTileClasses()" @key="@Project.Id" @onmouseenter="OnMouseEnter" @onmouseleave="OnMouseLeave">
    @if (!string.IsNullOrEmpty(ImageDataUri))
    {
        <div class="project-tile-background" style="background-image: url(@ImageDataUri);"></div>
    }
    else
    {
        <div class="project-tile-background project-tile-background-placeholder"></div>
    }
    
    <div class="project-tile-content">
        <div class="project-tile-overlay">
            <h5 class="project-tile-title">@Project.Headline</h5>
            <small class="project-tile-name">@Project.Name</small>
        </div>
    </div>
    
    @if (IsHovered && !string.IsNullOrEmpty(Project.Description))
    {
        <div class="project-description-overlay @GetOverlayClasses()" @key="@($"overlay-{Project.Id}")">
            <div class="project-description-content">
                @((MarkupString)MarkdownToHtml(Project.Description))
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public ProjectSummaryDto Project { get; set; } = null!;
    
    private bool IsHovered { get; set; }
    private string ImageDataUri { get; set; } = "";
    private bool IsImageLoaded { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadBackgroundImage();
    }

    private async Task LoadBackgroundImage()
    {
        if (Project.HasHeroImage)
        {
            try
            {
                Logger.LogDebug("Loading image for project {ProjectId}", Project.Id);
                var imageBytes = await ProjectService.GetProjectImageAsync(Project.Id);
                if (imageBytes != null && imageBytes.Length > 0)
                {
                    var base64String = Convert.ToBase64String(imageBytes);
                    ImageDataUri = $"data:image/png;base64,{base64String}";
                    IsImageLoaded = true;
                    Logger.LogDebug("Image loaded successfully for project {ProjectId}", Project.Id);
                    
                    // Force re-render with InvokeAsync to ensure client update
                    await InvokeAsync(StateHasChanged);
                }
                else
                {
                    Logger.LogWarning("No image data received for project {ProjectId}", Project.Id);
                    ImageDataUri = "";
                    await InvokeAsync(StateHasChanged);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error loading image for project {ProjectId}", Project.Id);
                ImageDataUri = "";
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task OnMouseEnter()
    {
        Logger.LogDebug("Mouse enter for project {ProjectId}", Project.Id);
        IsHovered = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnMouseLeave()
    {
        Logger.LogDebug("Mouse leave for project {ProjectId}", Project.Id);
        IsHovered = false;
        await InvokeAsync(StateHasChanged);
    }

    private string GetTileClasses()
    {
        var classes = new List<string>();
        
        if (IsHovered)
        {
            classes.Add("project-tile-hovered");
        }
        
        if (IsImageLoaded)
        {
            classes.Add("project-tile-image-loaded");
        }
        
        return string.Join(" ", classes);
    }

    private string GetOverlayClasses()
    {
        var classes = new List<string> { "project-overlay-visible" };
        return string.Join(" ", classes);
    }

    private string MarkdownToHtml(string markdown)
    {
        try
        {
            var pipeline = new MarkdownPipelineBuilder()
                .UseAdvancedExtensions()
                .Build();
            return Markdown.ToHtml(markdown, pipeline);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error converting markdown to HTML for project {ProjectId}", Project.Id);
            return markdown; // Return raw markdown as fallback
        }
    }
}